#ifndef PAIR_HPP
#define PAIR_HPP

namespace ft
{
// ###################################################################################################
// #################################   Pair   ########################################################
// ###################################################################################################
	template <class T1, class T2>
	struct pair
	{
		typedef T1			first_type;
		typedef T2			second_type;

		first_type	first;
		second_type	second;

	// -----------------------------------------------------------------------------------------------------------
	// ------------------------------------ Fonctions menbres --------------------------------------------------
	// -----------------------------------------------------------------------------------------------------------
	

		pair(): first(), second(){};

		template<class U, class V>
		pair(const pair<U,V>& pr): first(pr.first), second(pr.second){};

		pair(const first_type& a, const second_type& b): first(a), second(b){};

		// pas de destructor

		// operator= et swap pas dans c++98
		//pair& operator= (const pair& pr)
		//{
		//	this->first = pr.first;
		//	this->second = pr.second;
		//}

	};

	// -----------------------------------------------------------------------------------------------------------
	// ------------------------------------ Fonctions non menbres --------------------------------------------------
	// -----------------------------------------------------------------------------------------------------------
	// TBD a faire si besoin (pas dans c++98)

// ###################################################################################################
// #################################   make_pair  ####################################################
// ###################################################################################################

}
#endif
